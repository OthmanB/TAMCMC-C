#---------------------------------------
# Configuration File for the TAMCMC-C++
#---------------------------------------
#

outputs:
{
	/* Section dedicated to required inputs of the class 
	 * Outputs (files output.cpp and output.h
	*/
	Nbuffer=10000;
	erase_old_file=1; // if set to 0, it appends the existing files (if any exist)
	file_format="text"; // "text" or "hdf5". For the moment, only 'text' is available

	// Variables that decide which outputs we do write
	get_params=1; // if set to 1, save the parameters of the fitted model. This option might always be set to 1
	get_statcriteria=1; // if set to 1, save the statistical parameters (logLikelihood, logPrior, logPosterior, ...). Recommended to always set it to 1
	get_proposal_params=1; // if set to 1, save the proposal parameters (sigmas, mus, covarmats) of the parallel chains
	get_parallel_tempering=1; //if set to 1, save the parallel tempering information (swaped chain, probability, ...)
	get_models=0; // if set to 1, save the models for all chains. WARNING: Might greatly slow-down the process and will take a HUGE amount of space

	// Variables defining the output files. Do not write the filename full path and extension
	output_dir="/Users/obenomar//Dropbox/Temporary/Cpp-Playground/data_tests/outputs/";
	params_txt_fileout="params"; 
	proposal_txt_fileout="proposals"; 
	parallel_tempering_txt_fileout= "parallel_tempering"; 
	model_txt_fileout= "models";
	stat_txt_fileout= "stat_criteria";

	hdf5_fileout=""; // When writing on hdf5, everything is in one single file
	
	// Information required for the completion of an aborted run
	restore_file="restore.dat";

}

MALA:
{
	/* Variables that control the Metropolis-Hasting and Truncated Langevin scheme
	 * algorithm, the adaptive process of the proposal law and the parallel tempering
	 */
	
	Nsamples=10000; // Number of computed samples
	
	// ----------- Controls for the Adaptive process -----------
	c0=5; // Relaxation constrain. Important: Adjust empirically. Guideline: Large dimensionality requires c0~2. Small dimensionality requires c0~5-10
	epsilon1=1e-8; // Bundary for the Robins-Monroe stochastic algorithm. Must be as small as the numerical precision of the machine. With long double, can THEORITICALLY be 1e-19 (1e-16 for double)
	epsilon2=tmp.asDiagonal(); // Bundary for the Robins-Monroe stochastic algorithm. Must be as small as the numerical precision of the machine.
	A1=1e10; // Bundary for the Robins-Monroe stochastic algorithm. Must be as large as the numerical precision of the machine allows.
	// Define zones where Learning is made in different ways
	Nt_learn= [10, 100, 100000];  // DO NOT LEARN BELLOW THE FIRST VALUE OR AFTER THE LAST VALUE
	periods_learn=[5, 1]; // if Nt_learn[0]< i <Nt_learn[1], learn every 5 times, etc... THIS MUST BE OF size=Nt_learn.size()-1

	// ---------------- Controls for the MALA  -----------------
	delta=0; // This parameter is only for the MALA algorithm (ie, when the gradient is available). For a RWM, set to 0...
	delta_x=1e-10; // Boundary for the MALA... not used for the RWM mode
	use_drift=0; // When 0, use the MH scheme instead of the MALA scheme
 
 	// ----------- Controls for the parallel tempering ---------
 	Nchains=6;  // Number of parallel chains
	dN_mixing=5.; // Perform a chain mixing (parallel tempering) every dN_mixing
 	lambda_temp=1.8; //value should always be adjusted so that Tmax>120

	// --------- Experimental extra parameters ----------
	// ------ These are not yet  fully implemented ------
	MALA.proposal_type="Random"; // Exact_on_grid does not yet exist
	
}

modeling:
{
	/* This section contains the required information to (0) get the data, (1) compute 
	 * the models, (2) calculate the likelihood and (3) calculate the priors
	*/
	verbose_data=0; // If set to 1, shows the data on the screen
    file_data="/Users/obenomar/Dropbox/Temporary/Cpp-Playground/data_tests/test-gauss.txt"; // A two columns text file with the data
	
	model_fct_name="model_Test_Gaussian";; // Name of the function that contains the model.
	prior_fct_name="prior_Test_Gaussian"; // Name of the function that contains the priors that should be applied to the model
	likelihood_fct_name="chi_square"; // Name of the function that will calculate the likelihood. two choices: "chi_square" or "chi22p"
	
	likelihood_params=1; // Parameters that could define the likelihood. e.g., in the case of a chi(2,2p) statistics (chi22p function), we need p

	cfg_model_file=""; // Contains the initial guesses and the priors in an ASCII format. To each model_fct_name, a given format is expected
	
}


